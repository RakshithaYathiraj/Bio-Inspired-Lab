import numpy as np
import random

class Ant:
    def __init__(self, num_cities):
        self.num_cities = num_cities
        self.tour = []
        self.visited = set()
        self.distance_travelled = 0

    def visit_city(self, city, distance_matrix):
        self.tour.append(city)
        self.visited.add(city)
        if len(self.tour) > 1:
            self.distance_travelled += distance_matrix[self.tour[-2]][city]

    def calculate_tour_length(self, distance_matrix):
        length = 0
        for i in range(len(self.tour) - 1):
            length += distance_matrix[self.tour[i]][self.tour[i + 1]]
        length += distance_matrix[self.tour[-1]][self.tour[0]]  # return to start
        return length

class ACO_TSP:
    def __init__(self, distance_matrix, num_ants, alpha, beta, evaporation_rate, Q, max_iterations):
        self.num_cities = len(distance_matrix)
        self.distance_matrix = distance_matrix
        self.num_ants = num_ants
        self.alpha = alpha
        self.beta = beta
        self.evaporation_rate = evaporation_rate
        self.Q = Q
        self.max_iterations = max_iterations
        self.pheromone = np.ones((self.num_cities, self.num_cities)) / self.num_cities
        self.heuristic = 1 / (distance_matrix + np.diag([np.inf] * self.num_cities))

    def run(self):
        best_tour = None
        best_distance = np.inf

        for iteration in range(self.max_iterations):
            ants = [Ant(self.num_cities) for _ in range(self.num_ants)]
            for ant in ants:
                start_city = random.randint(0, self.num_cities - 1)
                ant.visit_city(start_city, self.distance_matrix)

                while len(ant.visited) < self.num_cities:
                    current_city = ant.tour[-1]
                    next_city = self.select_next_city(current_city, ant.visited)
                    ant.visit_city(next_city, self.distance_matrix)

                tour_length = ant.calculate_tour_length(self.distance_matrix)
                if tour_length < best_distance:
                    best_tour = ant.tour
                    best_distance = tour_length

            self.update_pheromone(ants)

        return best_tour, best_distance

    def select_next_city(self, current_city, visited):
        probabilities = []
        for city in range(self.num_cities):
            if city not in visited:
                pheromone = self.pheromone[current_city][city] ** self.alpha
                heuristic = self.heuristic[current_city][city] ** self.beta
                probabilities.append(pheromone * heuristic)
            else:
                probabilities.append(0)
        total = sum(probabilities)
        probabilities = [p / total for p in probabilities]
        return np.random.choice(range(self.num_cities), p=probabilities)

    def update_pheromone(self, ants):
        self.pheromone *= (1 - self.evaporation_rate)
        for ant in ants:
            contribution = self.Q / ant.distance_travelled
            for i in range(len(ant.tour) - 1):
                self.pheromone[ant.tour[i]][ant.tour[i + 1]] += contribution
                self.pheromone[ant.tour[i + 1]][ant.tour[i]] += contribution

def two_opt(tour, distance_matrix):
    best_distance = sum(distance_matrix[tour[i]][tour[i + 1]] for i in range(len(tour) - 1))
    best_distance += distance_matrix[tour[-1]][tour[0]]  # return to start
    improved = True

    while improved:
        improved = False
        for i in range(1, len(tour) - 2):
            for j in range(i + 1, len(tour)):
                if j - i == 1:
                    continue
                new_tour = tour[:i] + tour[i:j][::-1] + tour[j:]
                new_distance = sum(distance_matrix[new_tour[k]][new_tour[k + 1]] for k in range(len(new_tour) - 1))
                new_distance += distance_matrix[new_tour[-1]][new_tour[0]]  # return to start
                if new_distance < best_distance:
                    tour = new_tour
                    best_distance = new_distance
                    improved = True
    return tour

# Example usage
distance_matrix = np.array([
    [np.inf, 2, 9, 10],
    [1, np.inf, 6, 4],
    [15, 7, np.inf, 8],
    [6, 3, 12, np.inf]
])

aco = ACO_TSP(distance_matrix, num_ants=10, alpha=1, beta=5, evaporation_rate=0.5, Q=100, max_iterations=100)
best_tour, best_distance = aco.run()
best_tour = two_opt(best_tour, distance_matrix)
best_distance = sum(distance_matrix[best_tour[i]][best_tour[i + 1]] for i in range(len(best_tour) - 1))
best_distance += distance_matrix[best_tour[-1]][best_tour[0]]  # return to start

print("Best tour:", best_tour)
print("Best distance:", best_distance)
