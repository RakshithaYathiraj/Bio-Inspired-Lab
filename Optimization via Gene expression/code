pip install numpy scikit-learn


import random
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Generate a sample dataset (You can replace this with your dataset)
from sklearn.datasets import load_iris
data = load_iris()
X = data.data
y = data.target

# Parameters for the GEP
POP_SIZE = 100  # Population size
GENES = X.shape[1]  # Number of features in the dataset
MAX_GEN = 50  # Maximum number of generations
MUTATION_RATE = 0.1  # Mutation rate
CROSSOVER_RATE = 0.7  # Crossover rate

# 1. Initialize Population
def initialize_population(pop_size, genes):
    return np.random.randint(2, size=(pop_size, genes))  # Random binary population

# 2. Fitness Function (Using a Classifier like Random Forest)
def fitness(individual, X, y):
    selected_features = np.where(individual == 1)[0]  # Get the selected features
    if len(selected_features) == 0:  # If no features are selected, set fitness to 0
        return 0
    X_selected = X[:, selected_features]
    X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)
    classifier = RandomForestClassifier()
    classifier.fit(X_train, y_train)
    y_pred = classifier.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    return accuracy

# 3. Selection Function (Tournament Selection)
def tournament_selection(population, fitness_values, k=5):
    selected = np.random.choice(len(population), k, replace=False)
    best_idx = selected[np.argmax(fitness_values[selected])]
    return population[best_idx]

# 4. Crossover Function (One-point Crossover)
def crossover(parent1, parent2):
    if random.random() < CROSSOVER_RATE:
        point = random.randint(1, len(parent1) - 1)
        child1 = np.concatenate([parent1[:point], parent2[point:]])
        child2 = np.concatenate([parent2[:point], parent1[point:]])
        return child1, child2
    else:
        return parent1.copy(), parent2.copy()

# 5. Mutation Function (Random bit flip)
def mutate(individual):
    if random.random() < MUTATION_RATE:
        idx = random.randint(0, len(individual) - 1)
        individual[idx] = 1 - individual[idx]  # Flip the bit
    return individual

# 6. GEP Algorithm
def gep_algorithm(X, y, pop_size=POP_SIZE, max_gen=MAX_GEN):
    population = initialize_population(pop_size, X.shape[1])
    best_solution = None
    best_fitness = 0

    for gen in range(max_gen):
        # Evaluate fitness for all individuals
        fitness_values = np.array([fitness(ind, X, y) for ind in population])
       
        # Get the best solution
        gen_best_fitness = np.max(fitness_values)
        gen_best_idx = np.argmax(fitness_values)
        if gen_best_fitness > best_fitness:
            best_fitness = gen_best_fitness
            best_solution = population[gen_best_idx]
       
        print(f"Generation {gen+1}, Best Fitness: {best_fitness}")

        # Create new population
        new_population = []
        for _ in range(pop_size // 2):
            parent1 = tournament_selection(population, fitness_values)
            parent2 = tournament_selection(population, fitness_values)
            child1, child2 = crossover(parent1, parent2)
            new_population.append(mutate(child1))
            new_population.append(mutate(child2))

        population = np.array(new_population)

    return best_solution, best_fitness

# 7. Running the GEP Algorithm
best_solution, best_fitness = gep_algorithm(X, y)

# 8. Using the Best Solution
selected_features = np.where(best_solution == 1)[0]
print("\nBest Feature Subset (Selected Features):", selected_features)

# Evaluate the final model using the selected features
X_selected = X[:, selected_features]
X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)
classifier = RandomForestClassifier()
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Final Accuracy with Selected Features: {accuracy}")
